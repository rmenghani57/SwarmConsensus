In file included from [01m[K/home/adi/ardu_ws/src/iq_gnc/src/drone.cpp:1:0[m[K:
[01m[K/home/adi/ardu_ws/src/iq_gnc/src/classes/drone_base_class.cpp:96:21:[m[K [01;35m[Kwarning: [m[Kmulti-character character constant [[01;35m[K-Wmultichar[m[K]
         nh.getParam([01;35m[K'/N'[m[K, N);
                     [01;35m[K^~~~[m[K
[01m[K/home/adi/ardu_ws/src/iq_gnc/src/classes/drone_base_class.cpp:97:21:[m[K [01;35m[Kwarning: [m[Kcharacter constant too long for its type
         nh.getParam([01;35m[K'/update_dist'[m[K, update_dist);
                     [01;35m[K^~~~~~~~~~~~~~[m[K
[01m[K/home/adi/ardu_ws/src/iq_gnc/src/classes/drone_base_class.cpp:[m[K In member function â€˜[01m[Kvoid Drone::update_shortest_distance()[m[Kâ€™:
[01m[K/home/adi/ardu_ws/src/iq_gnc/src/classes/drone_base_class.cpp:96:28:[m[K [01;31m[Kerror: [m[Kno matching function for call to â€˜[01m[Kros::NodeHandle::getParam(int, int&)[m[Kâ€™
         nh.getParam('/N', N[01;31m[K)[m[K;
                            [01;31m[K^[m[K
In file included from [01m[K/opt/ros/melodic/include/ros/ros.h:45:0[m[K,
                 from [01m[K/home/adi/ardu_ws/src/iq_gnc/include/gnc_functions.hpp:8[m[K,
                 from [01m[K/home/adi/ardu_ws/src/iq_gnc/src/classes/drone_base_class.cpp:2[m[K,
                 from [01m[K/home/adi/ardu_ws/src/iq_gnc/src/drone.cpp:1[m[K:
[01m[K/opt/ros/melodic/include/ros/node_handle.h:1672:8:[m[K [01;36m[Knote: [m[Kcandidate: bool ros::NodeHandle::getParam(const string&, std::__cxx11::string&) const
   bool [01;36m[KgetParam[m[K(const std::string& key, std::string& s) const;
        [01;36m[K^~~~~~~~[m[K
[01m[K/opt/ros/melodic/include/ros/node_handle.h:1672:8:[m[K [01;36m[Knote: [m[K  no known conversion for argument 1 from â€˜[01m[Kint[m[Kâ€™ to â€˜[01m[Kconst string& {aka const std::__cxx11::basic_string<char>&}[m[Kâ€™
[01m[K/opt/ros/melodic/include/ros/node_handle.h:1683:8:[m[K [01;36m[Knote: [m[Kcandidate: bool ros::NodeHandle::getParam(const string&, double&) const
   bool [01;36m[KgetParam[m[K(const std::string& key, double& d) const;
        [01;36m[K^~~~~~~~[m[K
[01m[K/opt/ros/melodic/include/ros/node_handle.h:1683:8:[m[K [01;36m[Knote: [m[K  no known conversion for argument 1 from â€˜[01m[Kint[m[Kâ€™ to â€˜[01m[Kconst string& {aka const std::__cxx11::basic_string<char>&}[m[Kâ€™
[01m[K/opt/ros/melodic/include/ros/node_handle.h:1694:8:[m[K [01;36m[Knote: [m[Kcandidate: bool ros::NodeHandle::getParam(const string&, float&) const
   bool [01;36m[KgetParam[m[K(const std::string& key, float& f) const;
        [01;36m[K^~~~~~~~[m[K
[01m[K/opt/ros/melodic/include/ros/node_handle.h:1694:8:[m[K [01;36m[Knote: [m[K  no known conversion for argument 1 from â€˜[01m[Kint[m[Kâ€™ to â€˜[01m[Kconst string& {aka const std::__cxx11::basic_string<char>&}[m[Kâ€™
[01m[K/opt/ros/melodic/include/ros/node_handle.h:1705:8:[m[K [01;36m[Knote: [m[Kcandidate: bool ros::NodeHandle::getParam(const string&, int&) const
   bool [01;36m[KgetParam[m[K(const std::string& key, int& i) const;
        [01;36m[K^~~~~~~~[m[K
[01m[K/opt/ros/melodic/include/ros/node_handle.h:1705:8:[m[K [01;36m[Knote: [m[K  no known conversion for argument 1 from â€˜[01m[Kint[m[Kâ€™ to â€˜[01m[Kconst string& {aka const std::__cxx11::basic_string<char>&}[m[Kâ€™
[01m[K/opt/ros/melodic/include/ros/node_handle.h:1716:8:[m[K [01;36m[Knote: [m[Kcandidate: bool ros::NodeHandle::getParam(const string&, bool&) const
   bool [01;36m[KgetParam[m[K(const std::string& key, bool& b) const;
        [01;36m[K^~~~~~~~[m[K
[01m[K/opt/ros/melodic/include/ros/node_handle.h:1716:8:[m[K [01;36m[Knote: [m[K  no known conversion for argument 1 from â€˜[01m[Kint[m[Kâ€™ to â€˜[01m[Kconst string& {aka const std::__cxx11::basic_string<char>&}[m[Kâ€™
[01m[K/opt/ros/melodic/include/ros/node_handle.h:1727:8:[m[K [01;36m[Knote: [m[Kcandidate: bool ros::NodeHandle::getParam(const string&, XmlRpc::XmlRpcValue&) const
   bool [01;36m[KgetParam[m[K(const std::string& key, XmlRpc::XmlRpcValue& v) const;
        [01;36m[K^~~~~~~~[m[K
[01m[K/opt/ros/melodic/include/ros/node_handle.h:1727:8:[m[K [01;36m[Knote: [m[K  no known conversion for argument 1 from â€˜[01m[Kint[m[Kâ€™ to â€˜[01m[Kconst string& {aka const std::__cxx11::basic_string<char>&}[m[Kâ€™
[01m[K/opt/ros/melodic/include/ros/node_handle.h:1739:8:[m[K [01;36m[Knote: [m[Kcandidate: bool ros::NodeHandle::getParam(const string&, std::vector<std::__cxx11::basic_string<char> >&) const
   bool [01;36m[KgetParam[m[K(const std::string& key, std::vector<std::string>& vec) const;
        [01;36m[K^~~~~~~~[m[K
[01m[K/opt/ros/melodic/include/ros/node_handle.h:1739:8:[m[K [01;36m[Knote: [m[K  no known conversion for argument 1 from â€˜[01m[Kint[m[Kâ€™ to â€˜[01m[Kconst string& {aka const std::__cxx11::basic_string<char>&}[m[Kâ€™
[01m[K/opt/ros/melodic/include/ros/node_handle.h:1750:8:[m[K [01;36m[Knote: [m[Kcandidate: bool ros::NodeHandle::getParam(const string&, std::vector<double>&) const
   bool [01;36m[KgetParam[m[K(const std::string& key, std::vector<double>& vec) const;
        [01;36m[K^~~~~~~~[m[K
[01m[K/opt/ros/melodic/include/ros/node_handle.h:1750:8:[m[K [01;36m[Knote: [m[K  no known conversion for argument 1 from â€˜[01m[Kint[m[Kâ€™ to â€˜[01m[Kconst string& {aka const std::__cxx11::basic_string<char>&}[m[Kâ€™
[01m[K/opt/ros/melodic/include/ros/node_handle.h:1761:8:[m[K [01;36m[Knote: [m[Kcandidate: bool ros::NodeHandle::getParam(const string&, std::vector<float>&) const
   bool [01;36m[KgetParam[m[K(const std::string& key, std::vector<float>& vec) const;
        [01;36m[K^~~~~~~~[m[K
[01m[K/opt/ros/melodic/include/ros/node_handle.h:1761:8:[m[K [01;36m[Knote: [m[K  no known conversion for argument 1 from â€˜[01m[Kint[m[Kâ€™ to â€˜[01m[Kconst string& {aka const std::__cxx11::basic_string<char>&}[m[Kâ€™
[01m[K/opt/ros/melodic/include/ros/node_handle.h:1772:8:[m[K [01;36m[Knote: [m[Kcandidate: bool ros::NodeHandle::getParam(const string&, std::vector<int>&) const
   bool [01;36m[KgetParam[m[K(const std::string& key, std::vector<int>& vec) const;
        [01;36m[K^~~~~~~~[m[K
[01m[K/opt/ros/melodic/include/ros/node_handle.h:1772:8:[m[K [01;36m[Knote: [m[K  no known conversion for argument 1 from â€˜[01m[Kint[m[Kâ€™ to â€˜[01m[Kconst string& {aka const std::__cxx11::basic_string<char>&}[m[Kâ€™
[01m[K/opt/ros/melodic/include/ros/node_handle.h:1783:8:[m[K [01;36m[Knote: [m[Kcandidate: bool ros::NodeHandle::getParam(const string&, std::vector<bool>&) const
   bool [01;36m[KgetParam[m[K(const std::string& key, std::vector<bool>& vec) const;
        [01;36m[K^~~~~~~~[m[K
[01m[K/opt/ros/melodic/include/ros/node_handle.h:1783:8:[m[K [01;36m[Knote: [m[K  no known conversion for argument 1 from â€˜[01m[Kint[m[Kâ€™ to â€˜[01m[Kconst string& {aka const std::__cxx11::basic_string<char>&}[m[Kâ€™
[01m[K/opt/ros/melodic/include/ros/node_handle.h:1795:8:[m[K [01;36m[Knote: [m[Kcandidate: bool ros::NodeHandle::getParam(const string&, std::map<std::__cxx11::basic_string<char>, std::__cxx11::basic_string<char> >&) const
   bool [01;36m[KgetParam[m[K(const std::string& key, std::map<std::string, std::string>& map) const;
        [01;36m[K^~~~~~~~[m[K
[01m[K/opt/ros/melodic/include/ros/node_handle.h:1795:8:[m[K [01;36m[Knote: [m[K  no known conversion for argument 1 from â€˜[01m[Kint[m[Kâ€™ to â€˜[01m[Kconst string& {aka const std::__cxx11::basic_string<char>&}[m[Kâ€™
[01m[K/opt/ros/melodic/include/ros/node_handle.h:1806:8:[m[K [01;36m[Knote: [m[Kcandidate: bool ros::NodeHandle::getParam(const string&, std::map<std::__cxx11::basic_string<char>, double>&) const
   bool [01;36m[KgetParam[m[K(const std::string& key, std::map<std::string, double>& map) const;
        [01;36m[K^~~~~~~~[m[K
[01m[K/opt/ros/melodic/include/ros/node_handle.h:1806:8:[m[K [01;36m[Knote: [m[K  no known conversion for argument 1 from â€˜[01m[Kint[m[Kâ€™ to â€˜[01m[Kconst string& {aka const std::__cxx11::basic_string<char>&}[m[Kâ€™
[01m[K/opt/ros/melodic/include/ros/node_handle.h:1817:8:[m[K [01;36m[Knote: [m[Kcandidate: bool ros::NodeHandle::getParam(const string&, std::map<std::__cxx11::basic_string<char>, float>&) const
   bool [01;36m[KgetParam[m[K(const std::string& key, std::map<std::string, float>& map) const;
        [01;36m[K^~~~~~~~[m[K
[01m[K/opt/ros/melodic/include/ros/node_handle.h:1817:8:[m[K [01;36m[Knote: [m[K  no known conversion for argument 1 from â€˜[01m[Kint[m[Kâ€™ to â€˜[01m[Kconst string& {aka const std::__cxx11::basic_string<char>&}[m[Kâ€™
[01m[K/opt/ros/melodic/include/ros/node_handle.h:1828:8:[m[K [01;36m[Knote: [m[Kcandidate: bool ros::NodeHandle::getParam(const string&, std::map<std::__cxx11::basic_string<char>, int>&) const
   bool [01;36m[KgetParam[m[K(const std::string& key, std::map<std::string, int>& map) const;
        [01;36m[K^~~~~~~~[m[K
[01m[K/opt/ros/melodic/include/ros/node_handle.h:1828:8:[m[K [01;36m[Knote: [m[K  no known conversion for argument 1 from â€˜[01m[Kint[m[Kâ€™ to â€˜[01m[Kconst string& {aka const std::__cxx11::basic_string<char>&}[m[Kâ€™
[01m[K/opt/ros/melodic/include/ros/node_handle.h:1839:8:[m[K [01;36m[Knote: [m[Kcandidate: bool ros::NodeHandle::getParam(const string&, std::map<std::__cxx11::basic_string<char>, bool>&) const
   bool [01;36m[KgetParam[m[K(const std::string& key, std::map<std::string, bool>& map) const;
        [01;36m[K^~~~~~~~[m[K
[01m[K/opt/ros/melodic/include/ros/node_handle.h:1839:8:[m[K [01;36m[Knote: [m[K  no known conversion for argument 1 from â€˜[01m[Kint[m[Kâ€™ to â€˜[01m[Kconst string& {aka const std::__cxx11::basic_string<char>&}[m[Kâ€™
In file included from [01m[K/home/adi/ardu_ws/src/iq_gnc/src/drone.cpp:1:0[m[K:
[01m[K/home/adi/ardu_ws/src/iq_gnc/src/classes/drone_base_class.cpp:97:48:[m[K [01;31m[Kerror: [m[Kno matching function for call to â€˜[01m[Kros::NodeHandle::getParam(int, std::vector<double>&)[m[Kâ€™
         nh.getParam('/update_dist', update_dist[01;31m[K)[m[K;
                                                [01;31m[K^[m[K
In file included from [01m[K/opt/ros/melodic/include/ros/ros.h:45:0[m[K,
                 from [01m[K/home/adi/ardu_ws/src/iq_gnc/include/gnc_functions.hpp:8[m[K,
                 from [01m[K/home/adi/ardu_ws/src/iq_gnc/src/classes/drone_base_class.cpp:2[m[K,
                 from [01m[K/home/adi/ardu_ws/src/iq_gnc/src/drone.cpp:1[m[K:
[01m[K/opt/ros/melodic/include/ros/node_handle.h:1672:8:[m[K [01;36m[Knote: [m[Kcandidate: bool ros::NodeHandle::getParam(const string&, std::__cxx11::string&) const
   bool [01;36m[KgetParam[m[K(const std::string& key, std::string& s) const;
        [01;36m[K^~~~~~~~[m[K
[01m[K/opt/ros/melodic/include/ros/node_handle.h:1672:8:[m[K [01;36m[Knote: [m[K  no known conversion for argument 1 from â€˜[01m[Kint[m[Kâ€™ to â€˜[01m[Kconst string& {aka const std::__cxx11::basic_string<char>&}[m[Kâ€™
[01m[K/opt/ros/melodic/include/ros/node_handle.h:1683:8:[m[K [01;36m[Knote: [m[Kcandidate: bool ros::NodeHandle::getParam(const string&, double&) const
   bool [01;36m[KgetParam[m[K(const std::string& key, double& d) const;
        [01;36m[K^~~~~~~~[m[K
[01m[K/opt/ros/melodic/include/ros/node_handle.h:1683:8:[m[K [01;36m[Knote: [m[K  no known conversion for argument 1 from â€˜[01m[Kint[m[Kâ€™ to â€˜[01m[Kconst string& {aka const std::__cxx11::basic_string<char>&}[m[Kâ€™
[01m[K/opt/ros/melodic/include/ros/node_handle.h:1694:8:[m[K [01;36m[Knote: [m[Kcandidate: bool ros::NodeHandle::getParam(const string&, float&) const
   bool [01;36m[KgetParam[m[K(const std::string& key, float& f) const;
        [01;36m[K^~~~~~~~[m[K
[01m[K/opt/ros/melodic/include/ros/node_handle.h:1694:8:[m[K [01;36m[Knote: [m[K  no known conversion for argument 1 from â€˜[01m[Kint[m[Kâ€™ to â€˜[01m[Kconst string& {aka const std::__cxx11::basic_string<char>&}[m[Kâ€™
[01m[K/opt/ros/melodic/include/ros/node_handle.h:1705:8:[m[K [01;36m[Knote: [m[Kcandidate: bool ros::NodeHandle::getParam(const string&, int&) const
   bool [01;36m[KgetParam[m[K(const std::string& key, int& i) const;
        [01;36m[K^~~~~~~~[m[K
[01m[K/opt/ros/melodic/include/ros/node_handle.h:1705:8:[m[K [01;36m[Knote: [m[K  no known conversion for argument 1 from â€˜[01m[Kint[m[Kâ€™ to â€˜[01m[Kconst string& {aka const std::__cxx11::basic_string<char>&}[m[Kâ€™
[01m[K/opt/ros/melodic/include/ros/node_handle.h:1716:8:[m[K [01;36m[Knote: [m[Kcandidate: bool ros::NodeHandle::getParam(const string&, bool&) const
   bool [01;36m[KgetParam[m[K(const std::string& key, bool& b) const;
        [01;36m[K^~~~~~~~[m[K
[01m[K/opt/ros/melodic/include/ros/node_handle.h:1716:8:[m[K [01;36m[Knote: [m[K  no known conversion for argument 1 from â€˜[01m[Kint[m[Kâ€™ to â€˜[01m[Kconst string& {aka const std::__cxx11::basic_string<char>&}[m[Kâ€™
[01m[K/opt/ros/melodic/include/ros/node_handle.h:1727:8:[m[K [01;36m[Knote: [m[Kcandidate: bool ros::NodeHandle::getParam(const string&, XmlRpc::XmlRpcValue&) const
   bool [01;36m[KgetParam[m[K(const std::string& key, XmlRpc::XmlRpcValue& v) const;
        [01;36m[K^~~~~~~~[m[K
[01m[K/opt/ros/melodic/include/ros/node_handle.h:1727:8:[m[K [01;36m[Knote: [m[K  no known conversion for argument 1 from â€˜[01m[Kint[m[Kâ€™ to â€˜[01m[Kconst string& {aka const std::__cxx11::basic_string<char>&}[m[Kâ€™
[01m[K/opt/ros/melodic/include/ros/node_handle.h:1739:8:[m[K [01;36m[Knote: [m[Kcandidate: bool ros::NodeHandle::getParam(const string&, std::vector<std::__cxx11::basic_string<char> >&) const
   bool [01;36m[KgetParam[m[K(const std::string& key, std::vector<std::string>& vec) const;
        [01;36m[K^~~~~~~~[m[K
[01m[K/opt/ros/melodic/include/ros/node_handle.h:1739:8:[m[K [01;36m[Knote: [m[K  no known conversion for argument 1 from â€˜[01m[Kint[m[Kâ€™ to â€˜[01m[Kconst string& {aka const std::__cxx11::basic_string<char>&}[m[Kâ€™
[01m[K/opt/ros/melodic/include/ros/node_handle.h:1750:8:[m[K [01;36m[Knote: [m[Kcandidate: bool ros::NodeHandle::getParam(const string&, std::vector<double>&) const
   bool [01;36m[KgetParam[m[K(const std::string& key, std::vector<double>& vec) const;
        [01;36m[K^~~~~~~~[m[K
[01m[K/opt/ros/melodic/include/ros/node_handle.h:1750:8:[m[K [01;36m[Knote: [m[K  no known conversion for argument 1 from â€˜[01m[Kint[m[Kâ€™ to â€˜[01m[Kconst string& {aka const std::__cxx11::basic_string<char>&}[m[Kâ€™
[01m[K/opt/ros/melodic/include/ros/node_handle.h:1761:8:[m[K [01;36m[Knote: [m[Kcandidate: bool ros::NodeHandle::getParam(const string&, std::vector<float>&) const
   bool [01;36m[KgetParam[m[K(const std::string& key, std::vector<float>& vec) const;
        [01;36m[K^~~~~~~~[m[K
[01m[K/opt/ros/melodic/include/ros/node_handle.h:1761:8:[m[K [01;36m[Knote: [m[K  no known conversion for argument 1 from â€˜[01m[Kint[m[Kâ€™ to â€˜[01m[Kconst string& {aka const std::__cxx11::basic_string<char>&}[m[Kâ€™
[01m[K/opt/ros/melodic/include/ros/node_handle.h:1772:8:[m[K [01;36m[Knote: [m[Kcandidate: bool ros::NodeHandle::getParam(const string&, std::vector<int>&) const
   bool [01;36m[KgetParam[m[K(const std::string& key, std::vector<int>& vec) const;
        [01;36m[K^~~~~~~~[m[K
[01m[K/opt/ros/melodic/include/ros/node_handle.h:1772:8:[m[K [01;36m[Knote: [m[K  no known conversion for argument 1 from â€˜[01m[Kint[m[Kâ€™ to â€˜[01m[Kconst string& {aka const std::__cxx11::basic_string<char>&}[m[Kâ€™
[01m[K/opt/ros/melodic/include/ros/node_handle.h:1783:8:[m[K [01;36m[Knote: [m[Kcandidate: bool ros::NodeHandle::getParam(const string&, std::vector<bool>&) const
   bool [01;36m[KgetParam[m[K(const std::string& key, std::vector<bool>& vec) const;
        [01;36m[K^~~~~~~~[m[K
[01m[K/opt/ros/melodic/include/ros/node_handle.h:1783:8:[m[K [01;36m[Knote: [m[K  no known conversion for argument 1 from â€˜[01m[Kint[m[Kâ€™ to â€˜[01m[Kconst string& {aka const std::__cxx11::basic_string<char>&}[m[Kâ€™
[01m[K/opt/ros/melodic/include/ros/node_handle.h:1795:8:[m[K [01;36m[Knote: [m[Kcandidate: bool ros::NodeHandle::getParam(const string&, std::map<std::__cxx11::basic_string<char>, std::__cxx11::basic_string<char> >&) const
   bool [01;36m[KgetParam[m[K(const std::string& key, std::map<std::string, std::string>& map) const;
        [01;36m[K^~~~~~~~[m[K
[01m[K/opt/ros/melodic/include/ros/node_handle.h:1795:8:[m[K [01;36m[Knote: [m[K  no known conversion for argument 1 from â€˜[01m[Kint[m[Kâ€™ to â€˜[01m[Kconst string& {aka const std::__cxx11::basic_string<char>&}[m[Kâ€™
[01m[K/opt/ros/melodic/include/ros/node_handle.h:1806:8:[m[K [01;36m[Knote: [m[Kcandidate: bool ros::NodeHandle::getParam(const string&, std::map<std::__cxx11::basic_string<char>, double>&) const
   bool [01;36m[KgetParam[m[K(const std::string& key, std::map<std::string, double>& map) const;
        [01;36m[K^~~~~~~~[m[K
[01m[K/opt/ros/melodic/include/ros/node_handle.h:1806:8:[m[K [01;36m[Knote: [m[K  no known conversion for argument 1 from â€˜[01m[Kint[m[Kâ€™ to â€˜[01m[Kconst string& {aka const std::__cxx11::basic_string<char>&}[m[Kâ€™
[01m[K/opt/ros/melodic/include/ros/node_handle.h:1817:8:[m[K [01;36m[Knote: [m[Kcandidate: bool ros::NodeHandle::getParam(const string&, std::map<std::__cxx11::basic_string<char>, float>&) const
   bool [01;36m[KgetParam[m[K(const std::string& key, std::map<std::string, float>& map) const;
        [01;36m[K^~~~~~~~[m[K
[01m[K/opt/ros/melodic/include/ros/node_handle.h:1817:8:[m[K [01;36m[Knote: [m[K  no known conversion for argument 1 from â€˜[01m[Kint[m[Kâ€™ to â€˜[01m[Kconst string& {aka const std::__cxx11::basic_string<char>&}[m[Kâ€™
[01m[K/opt/ros/melodic/include/ros/node_handle.h:1828:8:[m[K [01;36m[Knote: [m[Kcandidate: bool ros::NodeHandle::getParam(const string&, std::map<std::__cxx11::basic_string<char>, int>&) const
   bool [01;36m[KgetParam[m[K(const std::string& key, std::map<std::string, int>& map) const;
        [01;36m[K^~~~~~~~[m[K
[01m[K/opt/ros/melodic/include/ros/node_handle.h:1828:8:[m[K [01;36m[Knote: [m[K  no known conversion for argument 1 from â€˜[01m[Kint[m[Kâ€™ to â€˜[01m[Kconst string& {aka const std::__cxx11::basic_string<char>&}[m[Kâ€™
[01m[K/opt/ros/melodic/include/ros/node_handle.h:1839:8:[m[K [01;36m[Knote: [m[Kcandidate: bool ros::NodeHandle::getParam(const string&, std::map<std::__cxx11::basic_string<char>, bool>&) const
   bool [01;36m[KgetParam[m[K(const std::string& key, std::map<std::string, bool>& map) const;
        [01;36m[K^~~~~~~~[m[K
[01m[K/opt/ros/melodic/include/ros/node_handle.h:1839:8:[m[K [01;36m[Knote: [m[K  no known conversion for argument 1 from â€˜[01m[Kint[m[Kâ€™ to â€˜[01m[Kconst string& {aka const std::__cxx11::basic_string<char>&}[m[Kâ€™
In file included from [01m[K/home/adi/ardu_ws/src/iq_gnc/src/drone.cpp:1:0[m[K:
[01m[K/home/adi/ardu_ws/src/iq_gnc/src/classes/drone_base_class.cpp:110:9:[m[K [01;31m[Kerror: [m[Kâ€˜[01m[Kshortest_distance[m[Kâ€™ was not declared in this scope
         [01;31m[Kshortest_distance[m[K[i] = min;
         [01;31m[K^~~~~~~~~~~~~~~~~[m[K
[01m[K/home/adi/ardu_ws/src/iq_gnc/src/classes/drone_base_class.cpp:110:9:[m[K [01;36m[Knote: [m[Ksuggested alternative: â€˜[01m[Kshortest_dist[m[Kâ€™
         [01;36m[Kshortest_distance[m[K[i] = min;
         [01;36m[K^~~~~~~~~~~~~~~~~[m[K
         [32m[Kshortest_dist[m[K
[01m[K/home/adi/ardu_ws/src/iq_gnc/src/drone.cpp:[m[K In function â€˜[01m[Kint main(int, char**)[m[Kâ€™:
[01m[K/home/adi/ardu_ws/src/iq_gnc/src/drone.cpp:81:23:[m[K [01;31m[Kerror: [m[Kno matching function for call to â€˜[01m[Kros::NodeHandle::getParam(const char [1])[m[Kâ€™
         nh.getParam(""[01;31m[K)[m[K
                       [01;31m[K^[m[K
In file included from [01m[K/opt/ros/melodic/include/ros/ros.h:45:0[m[K,
                 from [01m[K/home/adi/ardu_ws/src/iq_gnc/include/gnc_functions.hpp:8[m[K,
                 from [01m[K/home/adi/ardu_ws/src/iq_gnc/src/classes/drone_base_class.cpp:2[m[K,
                 from [01m[K/home/adi/ardu_ws/src/iq_gnc/src/drone.cpp:1[m[K:
[01m[K/opt/ros/melodic/include/ros/node_handle.h:1672:8:[m[K [01;36m[Knote: [m[Kcandidate: bool ros::NodeHandle::getParam(const string&, std::__cxx11::string&) const
   bool [01;36m[KgetParam[m[K(const std::string& key, std::string& s) const;
        [01;36m[K^~~~~~~~[m[K
[01m[K/opt/ros/melodic/include/ros/node_handle.h:1672:8:[m[K [01;36m[Knote: [m[K  candidate expects 2 arguments, 1 provided
[01m[K/opt/ros/melodic/include/ros/node_handle.h:1683:8:[m[K [01;36m[Knote: [m[Kcandidate: bool ros::NodeHandle::getParam(const string&, double&) const
   bool [01;36m[KgetParam[m[K(const std::string& key, double& d) const;
        [01;36m[K^~~~~~~~[m[K
[01m[K/opt/ros/melodic/include/ros/node_handle.h:1683:8:[m[K [01;36m[Knote: [m[K  candidate expects 2 arguments, 1 provided
[01m[K/opt/ros/melodic/include/ros/node_handle.h:1694:8:[m[K [01;36m[Knote: [m[Kcandidate: bool ros::NodeHandle::getParam(const string&, float&) const
   bool [01;36m[KgetParam[m[K(const std::string& key, float& f) const;
        [01;36m[K^~~~~~~~[m[K
[01m[K/opt/ros/melodic/include/ros/node_handle.h:1694:8:[m[K [01;36m[Knote: [m[K  candidate expects 2 arguments, 1 provided
[01m[K/opt/ros/melodic/include/ros/node_handle.h:1705:8:[m[K [01;36m[Knote: [m[Kcandidate: bool ros::NodeHandle::getParam(const string&, int&) const
   bool [01;36m[KgetParam[m[K(const std::string& key, int& i) const;
        [01;36m[K^~~~~~~~[m[K
[01m[K/opt/ros/melodic/include/ros/node_handle.h:1705:8:[m[K [01;36m[Knote: [m[K  candidate expects 2 arguments, 1 provided
[01m[K/opt/ros/melodic/include/ros/node_handle.h:1716:8:[m[K [01;36m[Knote: [m[Kcandidate: bool ros::NodeHandle::getParam(const string&, bool&) const
   bool [01;36m[KgetParam[m[K(const std::string& key, bool& b) const;
        [01;36m[K^~~~~~~~[m[K
[01m[K/opt/ros/melodic/include/ros/node_handle.h:1716:8:[m[K [01;36m[Knote: [m[K  candidate expects 2 arguments, 1 provided
[01m[K/opt/ros/melodic/include/ros/node_handle.h:1727:8:[m[K [01;36m[Knote: [m[Kcandidate: bool ros::NodeHandle::getParam(const string&, XmlRpc::XmlRpcValue&) const
   bool [01;36m[KgetParam[m[K(const std::string& key, XmlRpc::XmlRpcValue& v) const;
        [01;36m[K^~~~~~~~[m[K
[01m[K/opt/ros/melodic/include/ros/node_handle.h:1727:8:[m[K [01;36m[Knote: [m[K  candidate expects 2 arguments, 1 provided
[01m[K/opt/ros/melodic/include/ros/node_handle.h:1739:8:[m[K [01;36m[Knote: [m[Kcandidate: bool ros::NodeHandle::getParam(const string&, std::vector<std::__cxx11::basic_string<char> >&) const
   bool [01;36m[KgetParam[m[K(const std::string& key, std::vector<std::string>& vec) const;
        [01;36m[K^~~~~~~~[m[K
[01m[K/opt/ros/melodic/include/ros/node_handle.h:1739:8:[m[K [01;36m[Knote: [m[K  candidate expects 2 arguments, 1 provided
[01m[K/opt/ros/melodic/include/ros/node_handle.h:1750:8:[m[K [01;36m[Knote: [m[Kcandidate: bool ros::NodeHandle::getParam(const string&, std::vector<double>&) const
   bool [01;36m[KgetParam[m[K(const std::string& key, std::vector<double>& vec) const;
        [01;36m[K^~~~~~~~[m[K
[01m[K/opt/ros/melodic/include/ros/node_handle.h:1750:8:[m[K [01;36m[Knote: [m[K  candidate expects 2 arguments, 1 provided
[01m[K/opt/ros/melodic/include/ros/node_handle.h:1761:8:[m[K [01;36m[Knote: [m[Kcandidate: bool ros::NodeHandle::getParam(const string&, std::vector<float>&) const
   bool [01;36m[KgetParam[m[K(const std::string& key, std::vector<float>& vec) const;
        [01;36m[K^~~~~~~~[m[K
[01m[K/opt/ros/melodic/include/ros/node_handle.h:1761:8:[m[K [01;36m[Knote: [m[K  candidate expects 2 arguments, 1 provided
[01m[K/opt/ros/melodic/include/ros/node_handle.h:1772:8:[m[K [01;36m[Knote: [m[Kcandidate: bool ros::NodeHandle::getParam(const string&, std::vector<int>&) const
   bool [01;36m[KgetParam[m[K(const std::string& key, std::vector<int>& vec) const;
        [01;36m[K^~~~~~~~[m[K
[01m[K/opt/ros/melodic/include/ros/node_handle.h:1772:8:[m[K [01;36m[Knote: [m[K  candidate expects 2 arguments, 1 provided
[01m[K/opt/ros/melodic/include/ros/node_handle.h:1783:8:[m[K [01;36m[Knote: [m[Kcandidate: bool ros::NodeHandle::getParam(const string&, std::vector<bool>&) const
   bool [01;36m[KgetParam[m[K(const std::string& key, std::vector<bool>& vec) const;
        [01;36m[K^~~~~~~~[m[K
[01m[K/opt/ros/melodic/include/ros/node_handle.h:1783:8:[m[K [01;36m[Knote: [m[K  candidate expects 2 arguments, 1 provided
[01m[K/opt/ros/melodic/include/ros/node_handle.h:1795:8:[m[K [01;36m[Knote: [m[Kcandidate: bool ros::NodeHandle::getParam(const string&, std::map<std::__cxx11::basic_string<char>, std::__cxx11::basic_string<char> >&) const
   bool [01;36m[KgetParam[m[K(const std::string& key, std::map<std::string, std::string>& map) const;
        [01;36m[K^~~~~~~~[m[K
[01m[K/opt/ros/melodic/include/ros/node_handle.h:1795:8:[m[K [01;36m[Knote: [m[K  candidate expects 2 arguments, 1 provided
[01m[K/opt/ros/melodic/include/ros/node_handle.h:1806:8:[m[K [01;36m[Knote: [m[Kcandidate: bool ros::NodeHandle::getParam(const string&, std::map<std::__cxx11::basic_string<char>, double>&) const
   bool [01;36m[KgetParam[m[K(const std::string& key, std::map<std::string, double>& map) const;
        [01;36m[K^~~~~~~~[m[K
[01m[K/opt/ros/melodic/include/ros/node_handle.h:1806:8:[m[K [01;36m[Knote: [m[K  candidate expects 2 arguments, 1 provided
[01m[K/opt/ros/melodic/include/ros/node_handle.h:1817:8:[m[K [01;36m[Knote: [m[Kcandidate: bool ros::NodeHandle::getParam(const string&, std::map<std::__cxx11::basic_string<char>, float>&) const
   bool [01;36m[KgetParam[m[K(const std::string& key, std::map<std::string, float>& map) const;
        [01;36m[K^~~~~~~~[m[K
[01m[K/opt/ros/melodic/include/ros/node_handle.h:1817:8:[m[K [01;36m[Knote: [m[K  candidate expects 2 arguments, 1 provided
[01m[K/opt/ros/melodic/include/ros/node_handle.h:1828:8:[m[K [01;36m[Knote: [m[Kcandidate: bool ros::NodeHandle::getParam(const string&, std::map<std::__cxx11::basic_string<char>, int>&) const
   bool [01;36m[KgetParam[m[K(const std::string& key, std::map<std::string, int>& map) const;
        [01;36m[K^~~~~~~~[m[K
[01m[K/opt/ros/melodic/include/ros/node_handle.h:1828:8:[m[K [01;36m[Knote: [m[K  candidate expects 2 arguments, 1 provided
[01m[K/opt/ros/melodic/include/ros/node_handle.h:1839:8:[m[K [01;36m[Knote: [m[Kcandidate: bool ros::NodeHandle::getParam(const string&, std::map<std::__cxx11::basic_string<char>, bool>&) const
   bool [01;36m[KgetParam[m[K(const std::string& key, std::map<std::string, bool>& map) const;
        [01;36m[K^~~~~~~~[m[K
[01m[K/opt/ros/melodic/include/ros/node_handle.h:1839:8:[m[K [01;36m[Knote: [m[K  candidate expects 2 arguments, 1 provided
make[2]: *** [CMakeFiles/drone.dir/src/drone.cpp.o] Error 1
make[1]: *** [CMakeFiles/drone.dir/all] Error 2
make: *** [all] Error 2
